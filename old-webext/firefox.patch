diff --git a/toolkit/components/extensions/schemas/web_request.json b/toolkit/components/extensions/schemas/web_request.json
--- a/toolkit/components/extensions/schemas/web_request.json
+++ b/toolkit/components/extensions/schemas/web_request.json
@@ -73,27 +73,27 @@
       {
         "id": "OnHeadersReceivedOptions",
         "type": "string",
-        "enum": ["blocking", "responseHeaders"]
+        "enum": ["blocking", "responseHeaders", "securityInfo"]
       },
       {
         "id": "OnAuthRequiredOptions",
         "type": "string",
-        "enum": ["responseHeaders", "blocking", "asyncBlocking"]
+        "enum": ["responseHeaders", "blocking", "asyncBlocking", "securityInfo"]
       },
       {
         "id": "OnResponseStartedOptions",
         "type": "string",
-        "enum": ["responseHeaders"]
+        "enum": ["responseHeaders", "securityInfo"]
       },
       {
         "id": "OnBeforeRedirectOptions",
         "type": "string",
-        "enum": ["responseHeaders"]
+        "enum": ["responseHeaders", "securityInfo"]
       },
       {
         "id": "OnCompletedOptions",
         "type": "string",
-        "enum": ["responseHeaders"]
+        "enum": ["responseHeaders", "securityInfo"]
       },
       {
         "id": "RequestFilter",
@@ -177,6 +177,149 @@
         }
       },
       {
+        "id": "CertificateInfo",
+        "type": "object",
+        "description": "Contains the certificate properties of the request if it is a secure request.",
+        "properties": {
+          "subject": {
+            "type": "object",
+            "properties": {
+              "name": { "type": "string" },
+              "commonName": { "type": "string" },
+              "organization": { "type": "string" },
+              "organizationalUnit": { "type": "string" }
+            }
+          },
+          "issuer": {
+            "type": "object",
+            "properties": {
+              "commonName": { "type": "string" },
+              "organization": { "type": "string" },
+              "organizationalUnit": { "type": "string" }
+            }
+          },
+          "validity": {
+            "type": "object",
+            "description": "Contains start and end dates in GMT.",
+            "properties": {
+              "startGMT": { "type": "string" },
+              "endGMT": { "type": "string" }
+            }
+          },
+          "fingerprint": {
+            "type": "object",
+            "properties": {
+              "sha1": { "type": "string" },
+              "sha256": { "type": "string" }
+            }
+          },
+          "serialNumber": {
+            "type": "string"
+          },
+          "isBuiltInRoot": {
+            "type": "boolean"
+          },
+          "isSelfSigned": {
+            "type": "boolean"
+          },
+          "certType": {
+            "type": "string",
+            "enum": [ "unknown", "ca", "user", "email", "server", "any" ]
+          },
+          "sha256SubjectPublicKeyInfoDigest": {
+            "type": "string"
+          },
+          "keyUsages": {
+            "type": "string"
+          }
+        }
+      },
+      {
+        "id": "SecurityInfo",
+        "type": "object",
+        "description": "Contains the security properties of the request (ie. SSL/TLS information).",
+        "properties": {
+          "state": {
+            "type": "string",
+            "enum": [
+              "insecure",
+              "weak",
+              "broken",
+              "secure"
+            ]
+          },
+          "errorMessage": {
+            "type": "string",
+            "description": "Error message if state is \"broken\"",
+            "optional": true
+          },
+          "protocolVersion": {
+            "type": "string",
+            "description": "Protocol version if state is \"secure\"",
+            "enum": [
+              "TLSv1",
+              "TLSv1.1",
+              "TLSv1.2",
+              "TLSv1.3",
+              "unknown"
+            ],
+            "optional": true
+          },
+          "cipherSuite": {
+            "type": "string",
+            "description": "The cipher suite used in this request if state is \"secure\".",
+            "optional": true
+          },
+          "certificates": {
+            "description": "Certificate data if state is \"secure\".",
+            "type": "array",
+            "items": { "$ref": "CertificateInfo" },
+            "optional": true
+          },
+          "isDomainMismatch": {
+            "type": "boolean",
+            "optional": true
+          },
+          "isExtendedValidation": {
+            "type": "boolean",
+            "optional": true
+          },
+          "isNotValidAtThisTime": {
+            "type": "boolean",
+            "optional": true
+          },
+          "isUntrusted": {
+            "type": "boolean",
+            "optional": true
+          },
+          "certificateTransparencyStatus": {
+            "type": "string",
+            "enum": [
+              "not_applicable",
+              "policy_compliant",
+              "policy_not_enough_scts",
+              "policy_not_diverse_scts"
+            ]
+          },
+          "hsts": {
+            "type": "boolean",
+            "description": "True if host uses Strict Transport Security and state is \"secure\".",
+            "optional": true
+          },
+          "hpkp": {
+            "type": "string",
+            "description": "True if host uses Public Key Pinning and state is \"secure\".",
+            "optional": true
+          },
+          "weaknessReasons": {
+            "type": "array",
+            "items": { "type": "string" },
+            "description": "list of reasons that cause the request to be considered weak, if state is \"weak\"",
+            "optional": true
+          }
+        }
+      },
+      {
         "id": "UploadData",
         "type": "object",
         "properties": {
@@ -402,6 +545,7 @@
               "timeStamp": {"type": "number", "description": "The time when this signal is triggered, in milliseconds since the epoch."},
               "statusLine": {"type": "string", "description": "HTTP status line of the response or the 'HTTP/0.9 200 OK' string for HTTP/0.9 responses (i.e., responses that lack a status line)."},
               "responseHeaders": {"$ref": "HttpHeaders", "optional": true, "description": "The HTTP response headers that have been received with this response."},
+              "securityInfo": {"$ref": "SecurityInfo", "optional": true, "description": "Security information for this request."},
               "statusCode": {"type": "integer", "description": "Standard HTTP status code returned by the server."}
              }
           }
diff --git a/toolkit/components/extensions/test/mochitest/test_ext_webrequest_hsts.html b/toolkit/components/extensions/test/mochitest/test_ext_webrequest_hsts.html
--- a/toolkit/components/extensions/test/mochitest/test_ext_webrequest_hsts.html
+++ b/toolkit/components/extensions/test/mochitest/test_ext_webrequest_hsts.html
@@ -26,7 +26,11 @@ function getExtension() {
       browser.test.assertEq(expect.shift(), "onSendHeaders");
     }, {urls}, ["requestHeaders"]);
     browser.webRequest.onHeadersReceived.addListener(details => {
+      browser.test.log(`**** securityInfo ${details.securityInfo && JSON.stringify(details.securityInfo)}`);
       browser.test.assertEq(expect.shift(), "onHeadersReceived");
+      browser.test.assertEq(details.url.startsWith("https"),
+                            details.securityInfo && details.securityInfo.state == "secure",
+                            "security info reflects https");
 
       let headers = details.responseHeaders || [];
       for (let header of headers) {
@@ -40,7 +44,7 @@ function getExtension() {
         value: "max-age=31536000000",
       });
       return {responseHeaders: headers};
-    }, {urls}, ["blocking", "responseHeaders"]);
+    }, {urls}, ["blocking", "responseHeaders", "securityInfo"]);
     browser.webRequest.onBeforeRedirect.addListener(details => {
       browser.test.assertEq(expect.shift(), "onBeforeRedirect");
     }, {urls});
diff --git a/toolkit/modules/addons/WebRequest.jsm b/toolkit/modules/addons/WebRequest.jsm
--- a/toolkit/modules/addons/WebRequest.jsm
+++ b/toolkit/modules/addons/WebRequest.jsm
@@ -19,6 +19,7 @@ const {nsIHttpActivityObserver, nsISocke
 
 Cu.import("resource://gre/modules/Services.jsm");
 Cu.import("resource://gre/modules/XPCOMUtils.jsm");
+Cu.import("resource://gre/modules/SecurityInfo.jsm");
 
 XPCOMUtils.defineLazyModuleGetter(this, "ExtensionUtils",
                                   "resource://gre/modules/ExtensionUtils.jsm");
@@ -185,8 +186,9 @@ const MAYBE_CACHED_EVENTS = new Set([
 ]);
 
 const OPTIONAL_PROPERTIES = [
-  "requestHeaders", "responseHeaders", "statusCode", "statusLine", "error", "redirectUrl",
-  "requestBody", "scheme", "realm", "isProxy", "challenger", "proxyInfo", "ip", "frameAncestors",
+  "requestHeaders", "responseHeaders", "statusCode", "statusLine", "error",
+  "redirectUrl", "requestBody", "scheme", "securityInfo", "realm", "isProxy",
+  "challenger", "proxyInfo", "ip", "frameAncestors",
 ];
 
 function serializeRequestData(eventName) {
@@ -751,6 +753,10 @@ HttpObserverManager = {
           if (this.STATUS_TYPES.has(kind)) {
             commonData.statusCode = channel.statusCode;
             commonData.statusLine = channel.statusLine;
+            // TODO: Should we require a opts.securityInfo before we retreive it?
+            if (opts.securityInfo) {
+              commonData.securityInfo = SecurityInfo.parseSecurityInfo(channel.channel);
+            }
           }
         }
         let data = Object.create(commonData);
@@ -955,11 +961,11 @@ HttpEvent.prototype = {
 
 var onBeforeSendHeaders = new HttpEvent("modify", ["requestHeaders", "blocking"]);
 var onSendHeaders = new HttpEvent("afterModify", ["requestHeaders"]);
-var onHeadersReceived = new HttpEvent("headersReceived", ["blocking", "responseHeaders"]);
-var onAuthRequired = new HttpEvent("authRequired", ["blocking", "responseHeaders"]);
-var onBeforeRedirect = new HttpEvent("onRedirect", ["responseHeaders"]);
-var onResponseStarted = new HttpEvent("onStart", ["responseHeaders"]);
-var onCompleted = new HttpEvent("onStop", ["responseHeaders"]);
+var onHeadersReceived = new HttpEvent("headersReceived", ["blocking", "responseHeaders", "securityInfo"]);
+var onAuthRequired = new HttpEvent("authRequired", ["blocking", "responseHeaders", "securityInfo"]);
+var onBeforeRedirect = new HttpEvent("onRedirect", ["responseHeaders", "securityInfo"]);
+var onResponseStarted = new HttpEvent("onStart", ["responseHeaders", "securityInfo"]);
+var onCompleted = new HttpEvent("onStop", ["responseHeaders", "securityInfo"]);
 var onErrorOccurred = new HttpEvent("onError");
 
 var WebRequest = {
diff --git a/toolkit/modules/moz.build b/toolkit/modules/moz.build
--- a/toolkit/modules/moz.build
+++ b/toolkit/modules/moz.build
@@ -170,6 +170,7 @@ with Files('docs/**'):
 
 EXTRA_JS_MODULES += [
     'addons/MatchURLFilters.jsm',
+    'addons/SecurityInfo.jsm',
     'addons/WebNavigation.jsm',
     'addons/WebNavigationContent.js',
     'addons/WebNavigationFrames.jsm',
