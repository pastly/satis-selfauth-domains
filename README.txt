Jan 2019 note: The extension saw a massive overhaul that is now getting commit
to this repository:
 - Self-auth names now look like [56char]onion.foo.com as opposed to
   [56char].onion.foo.com
 - Support for verifying self-auth names in alt-svc's
 - Support for verifying onion address in alt-svc's
 - No longer require a Firefox patch
 - Relax some verification requirements to make adoption more likely to happen
   (for example, requiring the self-auth name to be in the TLS certificate)

                Contents
                --------

satis.system33.pw/

  Website files used in the video demonstration

webext/

  A Firefox web extension for checking alliuminated domain names.

Alliuminated domain.webm

  A video demonstrating the product of (an older version of) these files. See
  its README for more information.

nginx.conf.tmpl

  The starting point for an nginx config file. When parsed, it configures nginx
  to add the necessary HTTP headers to its responses for our extension to work.

tor/

  A git submodule pointing to the Tor code that has the necessary changes to
  generate these signatures. If you want to get it manually for some reason,
  it's the branch selfauth-sig-0.3.5.7 at https://github.com/pastly/public-tor

tor.selfauth-sig-0.3.5.7.tar.xz

  The Tor code as of my branch selfauth-sig-0.3.5.7 in case this is easier for
  you than a submodule.

update-satis-sig-nginx-conf.sh

  Take the signatures generated by Tor, combine them with the nginx config
  template, and outputs the final nginx template.


                Setting Up Server Side (Non-Alt-Svc Version)
                --------------------------------------------

--- Add your eventual self-auth domain to a TLS cert

  Jump ahead far enough to have compiled Tor. Comment out the
  HiddenSerivceSatisSig torrc options since you won't know all of them yet. Run
  Tor so that you have a v3 onion service.

  If your domain is example.com and if data/hs/hostname contains
  zfob4nth675763zthpij33iq4pz5q4qthr3gydih4qbdiwtypr2e3bqd.onion, then you will
  want the following domains in your TLS cert.

   - example.com
   - hllvtjcjomneltczwespyle2ihuaq5hypqaavn3is6a7t2dojuaa6rydonion.example.com

  Note the lack of a '.' before the word onion.

--- Get and build my branch of Tor

  See tor/ or tor.*.tar.xz for the code. I include an example torrc.

  You will need to edit the torrc to have your domain and your TLS fingerprint.
  While there's more intelligent ways to figure out your TLS fingerprint,
  you can do it with Firefox: https://i.imgur.com/QiPwYqF.png
  $ echo "77:C7:6C:11:70:33:25:EE:F0:6C:3B:E3:0F:15:C2:CB:2A:73:7A:56:F3:40:FD:76:29:1E:06:CB:0D:45:48:2C" | tr -d ':'

  Tor outputs your v3 onion address to data/hs/hostname for convenience. It
  also writes data/hs/satis_sig*, which you will need later.

--- Tell your webserver aobut the signed data

  Tor has generated its signature over the appropriate data in
  data/hs/satis_sig.

  I use nginx and (at the time of writing) the included nginx.conf.tmpl and
  update-satis-sig-nginx-conf.sh to get this data into my nginx config. These
  are a little more complex than would be necessary for other people,
  especially if you don't want to use the purposefully bad signatures too.

  To encoded the file in base 64, do something like this:

      B64_SIG=$(base64 data/hs/satis_sig | while read line; do echo -n $line; done)

  The to get this into nginx's config, I would

    1. copy my nginx conf into a template I can edit

    2. add the self-auth domain to the server_name line(s) so nginx will
       correctly respond to traffic on that name too.

    3. plan on using the macor processor m4 to find and replace text in the
       template file ...

    4. decide what text m4 will be looking for. For example M4_SATIS_SIG ...

    5. tell nginx to add an X-Alliuminate header to all queries:

           add_header X-Alliuminate M4_SATIS_SIG;

    6. run m4 with the nginx config template and outputting the result to the
       real nginx config file.
  
           m4 -DM4_SATIS_SIG="$B64_SIG" nginx.conf.tmpl > /etc/nginx/sites-available/example.com

    7. reload nginx

           systemctl reload nginx

  A similar process should be possible with Apache.

  Now when people visit example.com, their browser should be getting an
  X-Alliuminate header. Our extension will be expecting it if they visit
  hllvtjcjomneltczwespyle2ihuaq5hypqaavn3is6a7t2dojuaa6rydonion.example.com

--- Wrap this process up in a script and run it periodically

  Daily is recommended.

  If you have Tor run constantly in the background, then you just need to
  periodically run your script against the new data/hs/satis_sig file.

  I recommend a daily cronjob.

                Setting Up Server Side (Alt-Svc Version)
                --------------------------------------------

I will outline this process as modifications to the previous process.

--- (SKIP) Add your eventual self-auth domain to a TLS cert

You don't need to do this. The extension supports Alt-Svc's as a way to ease
adoption. In the name of easing adoption further, the extension doesn't require
Alt-Svc domains to exist in the TLS certificate.

--- Get and build my branch of Tor

Unchanged from above process.

--- Tell your webserver aobut the signed data

Unchanged from above process, though you'll of course want Alt-Svc headers in
your nginx config.

    add_header Alt-Svc 'h2="hllvtjcjomneltczwespyle2ihuaq5hypqaavn3is6a7t2dojuaa6rydonion.example.com:443"; ma=600;';


--- Wrap this process up in a script and run it periodically

Unchanged from above process.
